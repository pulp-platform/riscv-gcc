; Options for the RISC-V port of the compiler
;
; Copyright (C) 2011-2019 Free Software Foundation, Inc.
; PULP family support contributed by Eric Flamand (eflamand@iis.ee.ethz.ch) at ETH-Zurich
; and Greenwaves Technologies (eric.flamand@greenwaves-technologies.com)
;
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
; License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

HeaderInclude
config/riscv/riscv-opts.h


Enum
Name(Pulp_Chip_Config_Type) Type(enum Pulp_Chip_Config_Type)

EnumValue
Enum(Pulp_Chip_Config_Type) String(cluster) Value(PULP_CHIP_CONFIG_CLUSTER)

EnumValue
Enum(Pulp_Chip_Config_Type) String(fc) Value(PULP_CHIP_CONFIG_FC)

EnumValue
Enum(Pulp_Chip_Config_Type) String(all) Value(PULP_CHIP_CONFIG_ALL)

Enum
Name(Pulp_Chip_Type) Type(enum Pulp_Chip_Type)
EnumValue
Enum(Pulp_Chip_Type) String(honey) Value(PULP_CHIP_HONEY)

EnumValue
Enum(Pulp_Chip_Type) String(pulpino) Value(PULP_CHIP_PULPINO)

EnumValue
Enum(Pulp_Chip_Type) String(gap8) Value(PULP_CHIP_GAP8)

mchip=
Target RejectNegative Joined Var(Pulp_Chip) Enum(Pulp_Chip_Type) Init(PULP_CHIP_NONE)
-mchip=CHIP     Compile code for pulp chip CHIP


Enum
Name(Pulp_Processor_Type) Type(enum Pulp_Processor_Type)

EnumValue
Enum(Pulp_Processor_Type) String(pulpv0) Value(PULP_V0)

EnumValue
Enum(Pulp_Processor_Type) String(pulpv1) Value(PULP_V1)

EnumValue
Enum(Pulp_Processor_Type) String(pulpv2) Value(PULP_V2)

EnumValue
Enum(Pulp_Processor_Type) String(gap8) Value(PULP_GAP8)

EnumValue
Enum(Pulp_Processor_Type) String(pulpv3) Value(PULP_V3)

EnumValue
Enum(Pulp_Processor_Type) String(pulpslim) Value(PULP_SLIM)

mcpu=
Target RejectNegative Joined Var(Pulp_Cpu) Enum(Pulp_Processor_Type) Init(PULP_NONE)
-mcpu=CPU       Compile code for Pulp variant CPU, default is none.

mPE=
Target RejectNegative Joined UInteger Var(_Pulp_PE) Init(0) Deprecated
-mPE=N          Set PE cluster PE count to N.

mFC=
Target RejectNegative Joined UInteger Var(_Pulp_FC) Init(0) Deprecated
-mFC=           0: without FC, 1: with FC.

mreg=
Target RejectNegative Joined UInteger Var(Pulp_Number_Of_Reg) Init(32)
Use only the mreg first registers of the integer register file, minimum is 16 and default is 32

mbranch-cost=
Target RejectNegative Joined UInteger Var(riscv_branch_cost)
-mbranch-cost=N	Set the cost of branches to roughly N instructions.

mplt
Target Report Var(TARGET_PLT) Init(1)
When generating -fpic code, allow the use of PLTs. Ignored for fno-pic.

mabi=
Target Report RejectNegative Joined Enum(abi_type) Var(riscv_abi) Init(ABI_ILP32)
Specify integer and floating-point calling convention.

mpreferred-stack-boundary=
Target RejectNegative Joined UInteger Var(riscv_preferred_stack_boundary_arg)
Attempt to keep stack aligned to this power of 2.

Enum
Name(abi_type) Type(enum riscv_abi_type)
Supported ABIs (for use with the -mabi= option):

EnumValue
Enum(abi_type) String(ilp32) Value(ABI_ILP32)

EnumValue
Enum(abi_type) String(ilp32e) Value(ABI_ILP32E)

EnumValue
Enum(abi_type) String(ilp32f) Value(ABI_ILP32F)

EnumValue
Enum(abi_type) String(ilp32d) Value(ABI_ILP32D)

EnumValue
Enum(abi_type) String(lp64) Value(ABI_LP64)

EnumValue
Enum(abi_type) String(lp64f) Value(ABI_LP64F)

EnumValue
Enum(abi_type) String(lp64d) Value(ABI_LP64D)

mfdiv
Target Report Mask(FDIV)
Use hardware floating-point divide and square root instructions.

mdiv
Target Report Mask(DIV)
Use hardware instructions for integer division.

march=
Target Report RejectNegative Joined
-march=	Generate code for given RISC-V ISA (e.g. RV64IM).  ISA strings must be
lower-case. The following extensions groups are available: xpulpv0, xpulpv1, xpulpv2,
xpulpv3, xgap8, corev. Alternatively, more fine grained subsets can be selected with:
xpulphwloop, xpulppostmod, xpulpindregreg, xpulpmacsi, xpulpmacrnhi, xpulpmulrnhi,
xpulppartmac, xpulpminmax, xpulpabs, xpulpbitop, xpulpbitopsmall,
xpulpslet, xpulpvect, xpulpvectshufflepack, xpulpvectgap8, xpulpvectall, xpulpclip,
xpulpaddsubrn.
The following extensions are only meant for pulpv0 and pulpv1 for
compatibility reasons:
xpulppostmodv0, xpulpminmaxv0, xpulpabsv0

mtune=
Target RejectNegative Joined Var(riscv_tune_string)
-mtune=PROCESSOR	Optimize the output for PROCESSOR.

msmall-data-limit=
Target Joined Separate UInteger Var(g_switch_value) Init(8)
-msmall-data-limit=N	Put global and static data smaller than <number> bytes into a special section (on some targets).

msave-restore
Target Report Mask(SAVE_RESTORE)
Use smaller but slower prologue and epilogue code.

mcmodel=
Target Report RejectNegative Joined Enum(code_model) Var(riscv_cmodel) Init(TARGET_DEFAULT_CMODEL)
Specify the code model.

mstrict-align
Target Report Mask(STRICT_ALIGN) Save
Do not generate unaligned memory accesses.

mmemcpy
Target Report Mask(MEMCPY)
Don't optimize block moves

Enum
Name(code_model) Type(enum riscv_code_model)
Known code models (for use with the -mcmodel= option):

EnumValue
Enum(code_model) String(medlow) Value(CM_MEDLOW)

EnumValue
Enum(code_model) String(medany) Value(CM_MEDANY)

mexplicit-relocs
Target Report Mask(EXPLICIT_RELOCS)
Use %reloc() operators, rather than assembly macros, to load addresses.

mrelax
Target Bool Var(riscv_mrelax) Init(1)
Take advantage of linker relaxations to reduce the number of instructions
required to materialize symbol addresses.

; PULP
; Allow manual disabling of certain pulp extensions
; We put these flags into a separate variable because we were nearly overflowing
; target_flags


mpulp-hwloop
Target Mask(PULP_HWLOOP) Var(pulp_target_flags)
Use PULP hardware loop instructions

mpulp-postmod
Target Mask(PULP_POSTMOD) Var(pulp_target_flags)
Use PULP pointer post modification instructions

mpulp-indregreg
Target Mask(PULP_INDREGREG) Var(pulp_target_flags)
Use PULP register offset load/store instructions

mpulp-mac-si
Target Mask(PULP_MAC_SI) Var(pulp_target_flags)
Use PULP multiply accumulate instructions (32x32 into 32)

mpulp-mulrn-hi
Target Mask(PULP_MULRN_HI) Var(pulp_target_flags)
Use PULP multiply instructions with norm/round (16x16 into 32)

mpulp-macrn-hi
Target Mask(PULP_MACRN_HI) Var(pulp_target_flags)
Use PULP multiply accumulate instructions with norm/round (16x16 into 32)

mpulp-partmac
Target Mask(PULP_PARTMAC) Var(pulp_target_flags)
Use PULP multiply accumulate instructions (16x16 into 32)

mpulp-mac-alt
Target Mask(PULP_MAC_ALT) Var(pulp_target_flags)
Use PULP multiply accumulate instructions. This is a small subset of the PULP mac and partmac instructions plus some alternate mac instructions. Used in pulpv0. Use only if you know what you do.

mpulp-minmax
Target Mask(PULP_MINMAX) Var(pulp_target_flags)
Use PULP minmax instructions

mpulp-abs
Target Mask(PULP_ABS) Var(pulp_target_flags)
Use PULP abs instruction

mpulp-br
Target Mask(PULP_BR) Var(pulp_target_flags)
Use PULP branch instruction

mpulp-bitop
Target Mask(PULP_BITOP) Var(pulp_target_flags)
Use PULP bit manipulation instructions

mpulp-bitop-small
Target Mask(PULP_BITOP_SMALL) Var(pulp_target_flags)
Use PULP bit manipulation instructions. This is a subset of the PULP bit manipulation instructions. Used in pulpv0 and pulpv1. Use only if you know what you do.

mpulp-slet
Target Mask(PULP_SLET) Var(pulp_target_flags)
Use PULP slet/sletu instructions

mpulp-vect
Target Mask(PULP_VECT) Var(pulp_target_flags)
Use PULP SIMD instructions

mpulp-clip
Target Mask(PULP_CLIP) Var(pulp_target_flags)
Use PULP clip instructions

mpulp-addsubrn
Target Mask(PULP_ADDSUBRN) Var(pulp_target_flags)
Use PULP add/sub with norm/round instructions

mpulp-vectshufflepack
Target Mask(PULP_VECT_SHUFFLEPACK) Var(pulp_target_flags)
Use PULP SIMD shuffle and pack instructions

mpulp-vectgap8
Target Mask(PULP_VECT_GAP8) Var(pulp_target_flags)
Use PULP GAP8 additional SIMD instructions

mpulp-elw
Target Mask(PULP_ELW) Var(pulp_target_flags)
Use PULP ELW instruction (cluster synchronization)

mpulp-bitrev
Target Mask(PULP_BITREV) Var(pulp_target_flags)
Use PULP bitreverse instruction

mpulp-compat
Target Mask(PULP_COMPAT) Var(pulp_target_flags)
Use PULP extension instructions (if any) in pulpv0 and pulpv1 compatibility mode. This changes the instruction encoding (postmod) and instructions themselves (avg instead of addn). Use only if you know what you do.

mno-finduct
Target RejectNegative Mask(NOFINDUCT) Var(pulp_target_flags_override)
Disable cost function setting to favor induction scheme

; hardware loop tweaks
msloop
Target Mask(PULP_SLOOP)
Use long hw loop setup instead of padding with nop for loop with insn count < 3

mpulp-hwloop-min
Target Joined Separate UInteger Var(pulp_hwloop_min_size) Init(2)
-mpulp-hwloop-min=N	Minimum number of instructions in a hardware loop, default is 2

mpulp-hwloop-align
Target UInteger Var(pulp_hwloop_align) Init(0)
Force hardware loops instructions to be aligned

; PULP deprecated aliases
mnohwloop
Target Alias(mpulp-hwloop) NegativeAlias Warn(%<-mnhowloop%> is deprecated. Use -mno-pulp-hwloop instead.)

mnofinduct
Target Alias(mno-finduct) Warn(%<-mnofinduct%> is deprecated. Use -mno-finduct instead.)

mnopostmod
Target Alias(mpulp-postmod) NegativeAlias Warn(%<-mnopostmod%> is deprecated. Use -mno-pulp-postmod instead.)

mnoindregreg
Target Alias(mpulp-indregreg) NegativeAlias Warn(%<-mnoindregreg%> is deprecated. Use -mno-pulp-indregreg instead.)

mnomac
Target Alias(mpulp-mac-si) NegativeAlias Warn(%<-mnomac%> is deprecated. Use -mno-pulp-mac-si instead.)

mnopartmac
Target Alias(mpulp-partmac) NegativeAlias Warn(%<-mnopartmac%> is deprecated. Use -mno-pulp-partmac instead.)

mnominmax
Target Alias(mpulp-minmax) NegativeAlias Warn(%<-mnominmax%> is deprecated. Use -mno-pulp-minmax instead.)

mnoabs
Target Alias(mpulp-abs) NegativeAlias Warn(%<-mnoabs%> is deprecated. Use -mno-pulp-abs instead.)

mnobitop
Target Alias(mpulp-bitop) NegativeAlias Warn(%<-mnobitop%> is deprecated. Use -mno-pulp-bitop instead.)

; Disables reg to reg sign-extending instructions. Breaks compiled code.
mnosext
Deprecated

mnoslet
Target Alias(mpulp-slet) NegativeAlias Warn(%<-mnoslet%> is deprecated. Use -mno-pulp-slet instead.)

mnovect
Target Alias(mpulp-vect) NegativeAlias Warn(%<-mnovect%> is deprecated. Use -mno-pulp-vect instead.)

mnoclip
Target Alias(mpulp-clip) NegativeAlias Warn(%<-mnoclip%> is deprecated. Use -mno-pulp-clip instead.)

mnoaddsubnormround
Target Alias(mpulp-addsubrn) NegativeAlias Warn(%<-mnoaddsubnormround%> is deprecated. Use -mno-pulp-addsubrn instead.)

; mnomulmacnormround
; Target Alias(mpulp-mulmacrn) NegativeAlias Warn(%<-mnomulmacnormround%> is deprecated. Use -mno-pulp-mulmacrn instead.)

mnoshufflepack
Target Alias(mpulp-vectshufflepack) NegativeAlias Warn(%<-mnoshufflepack%> is deprecated. Use -mno-pulp-vectshufflepack instead.)

mhwloopmin=
Target Alias(mpulp-hwloop-min) Warn(%<-mhwloopmin=%> is deprecated. Use -mpulp-hwloop-min instead.)

mhwloopalign
Target Alias(mpulp-hwloop-align) Warn(%<-mhwloopalign%> is deprecated. Use -mpulp-hwloop-align instead.)

mnativeomp
Target Mask(MASK_OPEN_NATIVE)
Enable Native Mapping of OpenMP runtime

Mask(64BIT)

Mask(MUL)

Mask(ATOMIC)

Mask(HARD_FLOAT)

Mask(DOUBLE_FLOAT)

Mask(RVC)

Mask(RVE)

mriscv-attribute
Target Report Var(riscv_emit_attribute_p) Init(-1)
Emit RISC-V ELF attribute.

malign-data=
Target RejectNegative Joined Var(riscv_align_data_type) Enum(riscv_align_data) Init(riscv_align_data_type_xlen)
Use the given data alignment.

Enum
Name(riscv_align_data) Type(enum riscv_align_data)
Known data alignment choices (for use with the -malign-data= option):

EnumValue
Enum(riscv_align_data) String(xlen) Value(riscv_align_data_type_xlen)

EnumValue
Enum(riscv_align_data) String(natural) Value(riscv_align_data_type_natural)
